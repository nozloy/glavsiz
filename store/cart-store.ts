// cart-store.ts
import { create } from 'zustand'
import { persist, createJSONStorage } from 'zustand/middleware'
import { CartState, CartItem, responseData, OfferWithTypedJson } from './@types'

import { useCityStore } from './city-store'
import { Offer } from '@prisma/client'
import {
	clearCart,
	deleteCartItem,
	getCartItems,
	getCartItemsTotalPrice,
	patchCartItem,
	postCartItem,
} from '@/lib/cart'
import { toast } from 'sonner'
import apiClient from '@/lib/axios'
// –°–æ–∑–¥–∞–Ω–∏–µ zustand store –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
export const useCartStore = create<CartState>()(
	persist(
		(set, get) => ({
			cartItems: [], // –¢–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
			cartLoading: false, // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã
			totalAmount: 0, // –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤
			totalPrice: 0, // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤

			// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ä–∑–∏–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
			syncCart: async () => {
				set({ cartLoading: true })
				try {
					const cartItems = await getCartItems()
					const { activeCity } = useCityStore.getState() // –ü–æ–ª—É—á–∞–µ–º activeCity –∏–∑ zustand
					set({
						cartItems: cartItems,
						totalAmount: cartItems.reduce(
							(total: number, item: CartItem) => total + item.quantity,
							0,
						),
						totalPrice: await getCartItemsTotalPrice(cartItems, activeCity),
					})
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä–∑–∏–Ω—ã:', error)
				} finally {
					set({ cartLoading: false })
				}
			},

			// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
			addCartItem: async (offer: Offer) => {
				try {
					// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
					const status = await postCartItem(offer)
					//–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è 201
					if (status === 201) {
						await get().syncCart()
						toast('–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É', {
							icon: 'üõí',
							duration: 2000,
						})
					} else {
						toast('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', {
							icon: '‚ùóÔ∏è',
							duration: 2000,
						})
						throw new Error(
							`STORE: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${status.toString()}`,
						)
					}
				} catch (error) {
					console.error('STORE: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error)
				}
			},

			// –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
			removeCartItem: async (offer: Offer) => {
				try {
					const status = await deleteCartItem(offer)
					// –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è 200
					if (status === 200) {
						await get().syncCart()
						toast('–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã', {
							icon: 'üõí',
							duration: 2000,
						})
					} else {
						toast('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', {
							icon: '‚ùóÔ∏è',
							duration: 2000,
						})
						throw new Error(
							`STORE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ${status.toString()}`,
						)
					}
				} catch (error) {
					console.error('STORE: –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error)
				}
			},

			// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞
			updateCartItemQuantity: async (offer: Offer, quantity: number) => {
				try {
					const status = await patchCartItem(offer, quantity)
					// –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è 200
					if (status === 200) {
						await get().syncCart()
					} else {
						throw new Error(
							`STORE: –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É: ${status.toString()}`,
						)
					}
				} catch (error) {
					console.error('STORE: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞:', error)
				}
			},

			// –û—á–∏—â–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
			emptyCart: async () => {
				try {
					const status = await clearCart()
					// –°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è 200
					if (status === 200) {
						await get().syncCart()
						toast('–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞', {
							icon: 'üõí',
							duration: 2000,
						})
					} else {
						throw new Error(
							`STORE: –û—à–∏–±–∫–∞ –æ—á–∏—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã: ${status.toString()}`,
						)
					}
				} catch (error) {
					console.error('STORE: –û—à–∏–±–∫–∞ –æ—á–∏—â–µ–Ω–∏—è –∫–æ—Ä–∑–∏–Ω—ã:', error)
				}
			},
		}),
		{
			name: 'cart-store', // –ù–∞–∑–≤–∞–Ω–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
			storage: createJSONStorage(() => localStorage), // –ò—Å–ø–æ–ª—å–∑—É–µ–º localStorage –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
		},
	),
)
